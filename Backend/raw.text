

// const pool = require("../config/db");

// // Get all users (All admins can view users)
// exports.getUsers = async (req, res) => {
//   try {
//     const result = await pool.query(
//       "SELECT id, name, email, phone, role, status, created_at, updated_at, admin_id FROM users"
//     );
//     res.json(result.rows);
//   } catch (error) {
//     console.error("Error fetching users:", error);
//     res.status(500).json({ error: "Internal server error" });
//   }
// };

// // Get specific user details
// exports.getUserById = async (req, res) => {
//   const { id } = req.params;
//   try {
//     const result = await pool.query(
//       "SELECT id, name, email, phone, role, status, created_at, updated_at, admin_id FROM users WHERE id = $1",
//       [id]
//     );

//     if (result.rows.length === 0) {
//       return res.status(404).json({ error: "User not found" });
//     }

//     res.json(result.rows[0]);
//   } catch (error) {
//     console.error("Error fetching user:", error);
//     res.status(500).json({ error: "Internal server error" });
//   }
// };

// // Update user details (Only admins with "edit_users" permission, limited to support purposes)
// exports.updateUser = async (req, res) => {
//   const { id } = req.params;
//   const { name, phone } = req.body; // Limited to name and phone for support

//   try {
//     const result = await pool.query(
//       "UPDATE users SET name = $1, phone = $2 WHERE id = $3 RETURNING id, name, email, phone, role, status, created_at, updated_at, admin_id",
//       [name, phone, id]
//     );

//     if (result.rowCount === 0) {
//       return res.status(404).json({ error: "User not found" });
//     }

//     res.json({ message: "User updated successfully", user: result.rows[0] });
//   } catch (error) {
//     console.error("Error updating user:", error);
//     res.status(500).json({ error: "Internal server error" });
//   }
// };

// // Delete user (Admins with "delete_users" permission)
// exports.deleteUser = async (req, res) => {
//   const { id } = req.params;

//   try {
//     const result = await pool.query(
//       "DELETE FROM users WHERE id = $1 RETURNING id",
//       [id]
//     );

//     if (result.rowCount === 0) {
//       return res.status(404).json({ error: "User not found" });
//     }

//     res.json({ message: "User deleted successfully" });
//   } catch (error) {
//     console.error("Error deleting user:", error);
//     res.status(500).json({ error: "Internal server error" });
//   }
// };

// // Block a user
// exports.blockUser = async (req, res) => {
//   try {
//     const userId = Number(req.params.id);

//     if (!Number.isInteger(userId) || userId <= 0) {
//       return res.status(400).json({ error: "Invalid user ID" });
//     }

//     const adminPermissions = req.admin.permissions;
//     if (!adminPermissions.includes(4)) {
//       return res
//         .status(403)
//         .json({ error: "Forbidden: Insufficient permissions" });
//     }

//     const result = await pool.query(
//       "UPDATE users SET status = false WHERE id = $1 RETURNING *",
//       [userId]
//     );

//     if (result.rowCount === 0) {
//       return res.status(404).json({ error: "User not found" });
//     }

//     res.json({ message: "User blocked successfully", user: result.rows[0] });
//   } catch (error) {
//     console.error("Error blocking user:", error);
//     res.status(500).json({ error: "Internal server error" });
//   }
// };

// // Unblock a user
// exports.unblockUser = async (req, res) => {
//   try {
//     const { id } = req.params;

//     const result = await pool.query(
//       "UPDATE users SET status = true WHERE id = $1 RETURNING *",
//       [id]
//     );

//     if (result.rowCount === 0) {
//       return res.status(404).json({ error: "User not found" });
//     }

//     res.json({ message: "User unblocked successfully", user: result.rows[0] });
//   } catch (error) {
//     console.error("Error unblocking user:", error);
//     res.status(500).json({ error: "Internal server error" });
//   }
// };

// // Get all blocked users
// exports.getBlockedUsers = async (req, res) => {
//   try {
//     const result = await pool.query(
//       "SELECT id, name, email, phone, role, created_at, updated_at, admin_id FROM users WHERE status = false"
//     );
//     res.json(result.rows);
//   } catch (error) {
//     console.error("Error fetching blocked users:", error);
//     res.status(500).json({ error: "Internal server error" });
//   }
// };


frontend user.js



// import React, { useState, useEffect } from 'react';
// import { Sidebar } from '../Dashboard/Sidebar';
// import { Header } from '../Dashboard/Header';
// import { FiEdit, FiTrash2, FiLock, FiUnlock } from 'react-icons/fi';

// const UserAdmin = () => {
//   const [users, setUsers] = useState([]);
//   const [selectedUser, setSelectedUser] = useState(null);
//   const [searchInput, setSearchInput] = useState(''); // Changed from searchId to searchInput
//   const [message, setMessage] = useState('');
//   const [isSidebarOpen, setIsSidebarOpen] = useState(true);
//   const [showUpdateModal, setShowUpdateModal] = useState(false);
//   const [showSearchInput, setShowSearchInput] = useState(false);
//   const [updateUserData, setUpdateUserData] = useState({ id: '', name: '', phone: '' });

//   const API_BASE_URL = 'http://localhost:5000';

//   // Helper function to get the auth token from localStorage
//   const getAuthHeaders = () => {
//     const token = localStorage.getItem('token');
//     return {
//       'Content-Type': 'application/json',
//       Authorization: token ? `Bearer ${token}` : '',
//     };
//   };

//   useEffect(() => {
//     handleFetchAllUsers();
//   }, []);

//   const handleFetchAllUsers = async () => {
//     try {
//       const response = await fetch(`${API_BASE_URL}/users`, {
//         headers: getAuthHeaders(),
//       });
//       if (!response.ok) {
//         const errorData = await response.json();
//         throw new Error(errorData.error || `HTTP error! Status: ${response.status}`);
//       }
//       const data = await response.json();
//       console.log('Fetch all users response:', data); // Debug log
//       const sortedUsers = data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
//       setUsers(sortedUsers);
//       setSelectedUser(null);
//       setMessage('');
//     } catch (error) {
//       console.error('Fetch All Users Error:', error);
//       setMessage(`Error fetching users: ${error.message}`);
//     }
//   };

//   const handleSearchUser = async () => {
//     if (!searchInput.trim()) {
//       setMessage('Please enter a user ID or name.');
//       return;
//     }
//     try {
//       const isNumericId = /^\d+$/.test(searchInput.trim());
//       const url = isNumericId
//         ? `${API_BASE_URL}/users/${searchInput.trim()}`
//         : `${API_BASE_URL}/users?name=${encodeURIComponent(searchInput.trim())}`;

//       const response = await fetch(url, {
//         headers: getAuthHeaders(),
//       });
//       console.log(`Search response status: ${response.status}`); // Debug log
//       if (!response.ok) {
//         const errorData = await response.json();
//         throw new Error(errorData.error || 'Search failed');
//       }
//       const data = await response.json();

//       if (isNumericId) {
//         // ID search returns a single user
//         setSelectedUser(data);
//         setUsers([]); // Clear users list to show single user
//         setMessage('');
//       } else {
//         // Name search returns an array of users
//         const sortedUsers = data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
//         setSelectedUser(data);
//         setUsers([]); // Clear users list to show single user
//         setMessage('');
//       }
//     } catch (error) {
//       console.error('Search Error:', error);
//       setSelectedUser(null);
//       setUsers([]);
//       setMessage(`Error: ${error.message}`);
//     } finally {
//       setSearchInput('');
//       setShowSearchInput(false);
//     }
//   };

//   const handleDeleteUser = async (userId) => {
//     try {
//       // Optional: Pre-check user existence
//       const checkResponse = await fetch(`${API_BASE_URL}/users/${userId}`, {
//         headers: getAuthHeaders(),
//       });
//       if (!checkResponse.ok) {
//         const errorData = await checkResponse.json();
//         throw new Error(errorData.error || 'User not found');
//       }

//       const response = await fetch(`${API_BASE_URL}/users/${userId}`, {
//         method: 'DELETE',
//         headers: getAuthHeaders(),
//       });
//       console.log(`Delete response status: ${response.status}`); // Debug log
//       if (!response.ok) {
//         const errorData = await response.json();
//         console.log('Delete error response:', errorData); // Debug log
//         if (response.status === 404) {
//           throw new Error('User not found. Please check the user ID.');
//         } else {
//           throw new Error(errorData.error || 'Failed to delete user');
//         }
//       }
//       const data = await response.json();
//       console.log('Delete success response:', data); // Debug log
//       setMessage(data.message || 'User deleted successfully');
//       setUsers(users.filter((user) => user.id !== userId));
//       if (selectedUser && selectedUser.id === userId) {
//         setSelectedUser(null);
//       }
//     } catch (error) {
//       console.error('Delete error:', error);
//       setMessage(`Error deleting user: ${error.message}`);
//     }
//   };

//   const handleBlockUser = async (userId) => {
//     try {
//       const response = await fetch(`${API_BASE_URL}/users/${userId}/block`, {
//         method: 'PUT',
//         headers: getAuthHeaders(),
//       });
//       if (!response.ok) {
//         const errorData = await response.json();
//         throw new Error(errorData.error || 'Failed to block user');
//       }
//       const data = await response.json();
//       setMessage(data.message || 'User blocked successfully');
//       setUsers(users.map((user) => (user.id === userId ? data.user : user)));
//       if (selectedUser && selectedUser.id === userId) {
//         setSelectedUser(data.user);
//       }
//     } catch (error) {
//       console.error('Block error:', error);
//       setMessage(`Error blocking user: ${error.message}`);
//     }
//   };

//   const handleUnblockUser = async (userId) => {
//     try {
//       const response = await fetch(`${API_BASE_URL}/users/${userId}/unblock`, {
//         method: 'PUT',
//         headers: getAuthHeaders(),
//       });
//       if (!response.ok) {
//         const errorData = await response.json();
//         throw new Error(errorData.error || 'Failed to unblock user');
//       }
//       const data = await response.json();
//       setMessage(data.message || 'User unblocked successfully');
//       setUsers(users.map((user) => (user.id === userId ? data.user : user)));
//       if (selectedUser && selectedUser.id === userId) {
//         setSelectedUser(data.user);
//       }
//     } catch (error) {
//       console.error('Unblock error:', error);
//       setMessage(`Error unblocking user: ${error.message}`);
//     }
//   };

//   const handleUpdateUser = async () => {
//     try {
//       const response = await fetch(`${API_BASE_URL}/users/${updateUserData.id}`, {
//         method: 'PUT',
//         headers: getAuthHeaders(),
//         body: JSON.stringify({
//           name: updateUserData.name,
//           phone: updateUserData.phone,
//         }),
//       });
//       if (!response.ok) {
//         const errorData = await response.json();
//         throw new Error(errorData.error || 'Failed to update user');
//       }
//       const data = await response.json();
//       setUsers(
//         users.map((user) =>
//           user.id === updateUserData.id
//             ? { ...user, name: updateUserData.name, phone: updateUserData.phone }
//             : user
//         )
//       );
//       if (selectedUser && selectedUser.id === updateUserData.id) {
//         setSelectedUser({
//           ...selectedUser,
//           name: updateUserData.name,
//           phone: updateUserData.phone,
//         });
//       }
//       setMessage(data.message || 'User updated successfully');
//       setShowUpdateModal(false);
//     } catch (error) {
//       console.error('Update error:', error);
//       setMessage(`Error updating user: ${error.message}`);
//     }
//   };

//   const openUpdateModal = (user) => {
//     setUpdateUserData({ id: user.id, name: user.name || '', phone: user.phone || '' });
//     setShowUpdateModal(true);
//   };

//   return (
//     <div className="flex h-screen bg-gray-100">
//       <Sidebar isSidebarOpen={isSidebarOpen} setIsSidebarOpen={setIsSidebarOpen} />
//       <div className={`flex flex-col flex-1 transition-all duration-300 ${isSidebarOpen ? 'ml-64' : 'ml-20'}`}>
//         <Header isSidebarOpen={isSidebarOpen} setIsSidebarOpen={setIsSidebarOpen} />

//         <div className="p-6 flex-1 overflow-y-auto">
//           <div className="mb-6 flex items-center space-x-4">
//             <button
//               onClick={handleFetchAllUsers}
//               className="bg-gradient-to-r from-blue-500 to-blue-600 text-white py-2 px-6 rounded-lg shadow-md hover:from-blue-600 hover:to-blue-700 transition duration-300"
//             >
//               View All Users
//             </button>

//             {!showSearchInput ? (
//               <button
//                 onClick={() => setShowSearchInput(true)}
//                 className="bg-gradient-to-r from-blue-500 to-blue-600 text-white py-2 px-6 rounded-lg shadow-md hover:from-blue-600 hover:to-blue-700 transition duration-300"
//               >
//                 Search by ID or Name
//               </button>
//             ) : (
//               <div className="flex items-center space-x-2">
//                 <input
//                   type="text"
//                   placeholder="Enter User ID or Name"
//                   value={searchInput}
//                   onChange={(e) => setSearchInput(e.target.value)}
//                   className="p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
//                 />
//                 <button
//                   onClick={handleSearchUser}
//                   className="bg-gradient-to-r from-green-500 to-green-600 text-white py-2 px-4 rounded-lg shadow-md hover:from-green-600 hover:to-green-700 transition duration-300"
//                 >
//                   Search
//                 </button>
//                 <button
//                   onClick={() => {
//                     setShowSearchInput(false);
//                     setSearchInput('');
//                   }}
//                   className="bg-gray-300 text-gray-800 py-2 px-4 rounded-lg shadow hover:bg-gray-400 transition duration-300"
//                 >
//                   Cancel
//                 </button>
//               </div>
//             )}
//           </div>

//           {message && (
//             <div
//               className={`p-4 mb-4 rounded-lg border ${
//                 message.includes('Error') ? 'bg-red-100 text-red-700 border-red-300' : 'bg-green-100 text-green-700 border-green-300'
//               }`}
//             >
//               {message}
//             </div>
//           )}

//           {selectedUser ? (
//             <div className="bg-white p-6 rounded-lg shadow-lg">
//               <h3 className="text-xl font-semibold mb-4 text-gray-800">User Details</h3>
//               <div className="grid grid-cols-2 gap-4">
//                 <p>
//                   <strong>ID:</strong> {selectedUser.id}
//                 </p>
//                 <p>
//                   <strong>Name:</strong> {selectedUser.name || 'N/A'}
//                 </p>
//                 <p>
//                   <strong>Email:</strong> {selectedUser.email || 'N/A'}
//                 </p>
//                 <p>
//                   <strong>Phone:</strong> {selectedUser.phone || 'N/A'}
//                 </p>
//                 <p>
//                   <strong>Role:</strong> {selectedUser.role || 'N/A'}
//                 </p>
//                 <p>
//                   <strong>Status:</strong> {selectedUser.status ? 'Active' : 'Blocked'}
//                 </p>
//                 <p>
//                   <strong>Created At:</strong> {new Date(selectedUser.created_at).toLocaleString()}
//                 </p>
//                 <p>
//                   <strong>Updated At:</strong> {new Date(selectedUser.updated_at).toLocaleString()}
//                 </p>
//               </div>
//               <div className="mt-4 flex space-x-4">
//                 <button onClick={() => openUpdateModal(selectedUser)} className="text-blue-600 hover:text-blue-900">
//                   <FiEdit size={20} />
//                 </button>
//                 <button
//                   onClick={() => handleDeleteUser(selectedUser.id)}
//                   className="text-red-600 hover:text-red-900"
//                 >
//                   <FiTrash2 size={20} />
//                 </button>
//                 {selectedUser.status ? (
//                   <button
//                     onClick={() => handleBlockUser(selectedUser.id)}
//                     className="text-orange-600 hover:text-orange-900"
//                   >
//                     <FiLock size={20} />
//                   </button>
//                 ) : (
//                   <button
//                     onClick={() => handleUnblockUser(selectedUser.id)}
//                     className="text-green-600 hover:text-green-900"
//                   >
//                     <FiUnlock size={20} />
//                   </button>
//                 )}
//               </div>
//             </div>
//           ) : (
//             <div className="bg-white rounded-lg shadow-lg overflow-x-auto">
//               {users.length === 0 ? (
//                 <p className="p-4 text-gray-500">No users to display.</p>
//               ) : (
//                 <table className="min-w-full divide-y divide-gray-200">
//                   <thead className="bg-gray-800">
//                     <tr>
//                       {['ID', 'Name', 'Email', 'Phone', 'Role', 'Status', 'Created At', 'Actions'].map((h) => (
//                         <th
//                           key={h}
//                           className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider"
//                         >
//                           {h}
//                         </th>
//                       ))}
//                     </tr>
//                   </thead>
//                   <tbody className="bg-white divide-y divide-gray-200">
//                     {users.map((user) => (
//                       <tr key={user.id} className="hover:bg-gray-50">
//                         <td className="px-6 py-4 whitespace-nowrap">{user.id}</td>
//                         <td className="px-6 py-4 whitespace-nowrap">{user.name || 'N/A'}</td>
//                         <td className="px-6 py-4 whitespace-nowrap">{user.email || 'N/A'}</td>
//                         <td className="px-6 py-4 whitespace-nowrap">{user.phone || 'N/A'}</td>
//                         <td className="px-6 py-4 whitespace-nowrap">{user.role || 'N/A'}</td>
//                         <td className="px-6 py-4 whitespace-nowrap">
//                           <span
//                             className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
//                               user.status ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
//                             }`}
//                           >
//                             {user.status ? 'Active' : 'Blocked'}
//                           </span>
//                         </td>
//                         <td className="px-6 py-4 whitespace-nowrap">
//                           {new Date(user.created_at).toLocaleString()}
//                         </td>
//                         <td className="px-6 py-4 whitespace-nowrap">
//                           <div className="flex space-x-4">
//                             <button
//                               onClick={() => openUpdateModal(user)}
//                               className="text-blue-600 hover:text-blue-900"
//                             >
//                               <FiEdit size={20} />
//                             </button>
//                             <button
//                               onClick={() => handleDeleteUser(user.id)}
//                               className="text-red-600 hover:text-red-900"
//                             >
//                               <FiTrash2 size={20} />
//                             </button>
//                             {user.status ? (
//                               <button
//                                 onClick={() => handleBlockUser(user.id)}
//                                 className="text-orange-600 hover:text-orange-900"
//                               >
//                                 <FiLock size={20} />
//                               </button>
//                             ) : (
//                               <button
//                                 onClick={() => handleUnblockUser(user.id)}
//                                 className="text-green-600 hover:text-green-900"
//                               >
//                                 <FiUnlock size={20} />
//                               </button>
//                             )}
//                           </div>
//                         </td>
//                       </tr>
//                     ))}
//                   </tbody>
//                 </table>
//               )}
//             </div>
//           )}
//         </div>
//       </div>

//       {showUpdateModal && (
//         <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
//           <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
//             <h2 className="text-xl font-semibold mb-4 text-gray-800">Update User</h2>
//             <div className="space-y-4">
//               <div>
//                 <label className="block text-sm font-medium text-gray-700">Name</label>
//                 <input
//                   type="text"
//                   value={updateUserData.name}
//                   onChange={(e) => setUpdateUserData({ ...updateUserData, name: e.target.value })}
//                   className="mt-1 block w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
//                 />
//               </div>
//               <div>
//                 <label className="block text-sm font-medium text-gray-700">Phone Number</label>
//                 <input
//                   type="tel"
//                   value={updateUserData.phone}
//                   onChange={(e) => setUpdateUserData({ ...updateUserData, phone: e.target.value })}
//                   className="mt-1 block w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
//                 />
//               </div>
//             </div>
//             <div className="mt-6 flex justify-end space-x-3">
//               <button
//                 onClick={() => setShowUpdateModal(false)}
//                 className="bg-gray-300 text-gray-700 py-2 px-4 rounded-lg hover:bg-gray-400"
//               >
//                 Cancel
//               </button>
//               <button
//                 onClick={handleUpdateUser}
//                 className="bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600"
//               >
//                 Save
//               </button>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };

// export default UserAdmin;

